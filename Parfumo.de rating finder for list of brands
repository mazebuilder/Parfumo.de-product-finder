{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved perfumes to perfumes.csv\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "from urllib import quote_plus\n",
    "import csv\n",
    "\n",
    "def get_parfumo_list(brands):\n",
    "    all_perfumes = []\n",
    "\n",
    "    for brand in brands:\n",
    "        current_page = 1\n",
    "        while True:\n",
    "            search_url = \"https://www.parfumo.de/s_perfumes.php?current_page={}&lt=1&filter={}\".format(current_page, quote_plus(brand))\n",
    "            response = requests.get(search_url)\n",
    "\n",
    "            if response.status_code != 200:\n",
    "                break\n",
    "\n",
    "            soup = BeautifulSoup(response.text, \"html.parser\")\n",
    "            perfume_list = soup.find_all(\"div\", {\"class\": \"col col-normal\"})\n",
    "\n",
    "            if not perfume_list:\n",
    "                break\n",
    "\n",
    "            for perfume in perfume_list:\n",
    "                name_element = perfume.find(\"div\", {\"class\": \"name\"}).find(\"a\")\n",
    "                perfume_name = name_element.text.strip()\n",
    "\n",
    "                rating_element = perfume.find(\"div\", {\"class\": \"av av_scent\"})\n",
    "                if rating_element:\n",
    "                    perfume_rating = float(rating_element.contents[0].strip())\n",
    "                else:\n",
    "                    perfume_rating = None\n",
    "\n",
    "                all_perfumes.append((perfume_name, perfume_rating))\n",
    "\n",
    "            current_page += 1\n",
    "\n",
    "    return all_perfumes\n",
    "\n",
    #here you can insert the brands you are looking for
    "brands = [\n",
    "    \"Armaf\",\n",
    "    \"Bvlgari\",\n",
    "    \"Chanel\",\n",
    "    \"Diesel\",\n",
    "    \"Dior\",\n",
    "    \"Dua Brand\",\n",
    "    \"Giorgio Armani\",\n",
    "    \"Halloween\",\n",
    "    \"Initio\",\n",
    "    \"John Varvatos\",\n",
    "    \"Kilian\",\n",
    "    \"Maison Francis Kurkdjian\",\n",
    "    \"Maison Margiela\",\n",
    "    \"Mancera\",\n",
    "    \"Montale\",\n",
    "    \"Nikos\",\n",
    "    \"Paco Rabanne\",\n",
    "    \"Parfums de Marly\",\n",
    "    \"Prada\",\n",
    "    \"Roja Parfums\",\n",
    "    \"Tom Ford\",\n",
    "    \"Versace\",\n",
    "    \"XerJoff\",\n",
    "    \"Yves Saint Laurent\",\n",
    "    \"Amouage\",\n",
    "    \"Al Haramain\",\n",
    "    \"Bruno Banani\",\n",
    "    \"Abercrombie & Fitch\",\n",
    "    \"Creed\",\n",
    "    \"Dolce & Gabbana\",\n",
    "    \"Juicy Couture\",\n",
    "    \"Joop\",\n",
    "    \"Lattafa\",\n",
    "    \"Louis Vuitton\",\n",
    "    \"Perry Ellis\",\n",
    "    \"Scent Story\",\n",
    "    \"Zadig & Voltaire\",\n",
    "]\n",
    "\n",
    "perfumes = get_parfumo_list(brands)\n",
    "\n",
    "if perfumes:\n",
    "    sorted_perfumes = sorted(perfumes, key=lambda x: x[1], reverse=True)\n",
    "\n",
    "    # Save the results to a CSV file\n",
    "    with open(\"perfumes.csv\", \"wb\") as csvfile:\n",
    "        csv_writer = csv.writer(csvfile)\n",
    "        csv_writer.writerow([\"Name\", \"Rating\"])\n",
    "\n",
    "        for name, rating in sorted_perfumes:\n",
    "            csv_writer.writerow([name.encode('utf-8'), rating if rating is not None else \"N/A\"])\n",
    "\n",
    "    print(\"Saved perfumes to perfumes.csv\")\n",
    "else:\n",
    "    print(\"No perfumes found.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
